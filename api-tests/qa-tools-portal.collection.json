{
	"info": {
		"_postman_id": "00db0b7d-cc6e-403e-91eb-24d0b319ecdb",
		"name": "qa-tools-portal",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "45704086",
		"_collection_link": "https://nathenwatters.postman.co/workspace/c5a03961-f356-47aa-81b1-209131ec55eb/collection/45704086-00db0b7d-cc6e-403e-91eb-24d0b319ecdb?action=share&source=collection_link&creator=45704086"
	},
	"item": [
		{
			"name": "GET Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields: id, name, and price\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(product => {",
							"        pm.expect(product).to.have.all.keys('id', 'name', 'price');",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Price should be a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    responseData.forEach(product => {",
							"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0, \"Price should be a non-negative number\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the response schema against the expected structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
							"    ",
							"    responseData.forEach(product => {",
							"        pm.expect(product).to.be.an('object');",
							"        pm.expect(product).to.have.all.keys('id', 'name', 'price');",
							"        pm.expect(product.id).to.be.a('number');",
							"        pm.expect(product.name).to.be.a('string');",
							"        pm.expect(product.price).to.be.a('number');",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}}/api/products",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Health",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'status'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('status');",
							"});",
							"",
							"",
							"pm.test(\"Status must be a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the correct Content-Type of application/json\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseURL}}/health",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Checkout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(201);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.all.keys('message', 'product');",
							"});",
							"",
							"",
							"pm.test(\"Validate the product object structure\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('product').that.is.an('object');",
							"    ",
							"    const product = responseData.product;",
							"    ",
							"    pm.expect(product).to.have.all.keys('id', 'name', 'price');",
							"    pm.expect(product.id).to.be.a('number');",
							"    pm.expect(product.name).to.be.a('string');",
							"    pm.expect(product.price).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Product price must be a non-negative number\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.product).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.product.price).to.exist.and.to.be.a('number').and.to.be.at.least(0, \"Price should be non-negative\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.variables.set('productId', pm.environment.get('productId') || 1);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"productId\": {{productId}}\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseURL}}/api/checkout",
					"protocol": "http",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api",
						"checkout"
					]
				}
			},
			"response": []
		}
	]
}